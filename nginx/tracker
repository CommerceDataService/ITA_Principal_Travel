upstream app_server {
    server 127.0.0.1:8000;
}
server {
    listen 80;
    server_name travel.cds.commerce.gov www.travel.cds.commerce.gov travel-tracker-20907825.us-east-1.elb.amazonaws.com ec2-54-89-77-119.compute-1.amazonaws.com;

    location /static/ {
        root /home/ubuntu/code/ITA_Principal_Travel;
        autoindex on;
        # if asset versioning is used
        if ($query_string) {
            expires max;
        }
    }

    set $my_host $host;
    # if the host header is an ip address change it to www.mysite.com
    # this works around requests coming from ELB with either the instance's
    # internal ip address in the case of health checks or an unknown internal
    # ip address in the case of latency checks. translating them to a known
    # good host header makes django's ALLOWED_HOSTS happy
    if ($host ~ "\d+\.\d+\.\d+\.\d+") {
        set $my_host "travel.cds.commerce.gov";
    }

    location / {
        auth_basic "This is a private beta.";
        auth_basic_user_file /home/ubuntu/code/ITA_Principal_Travel/nginx/htpasswd;

        proxy_pass_header Server;
        proxy_set_header Host $my_host;
        proxy_redirect off;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        proxy_connect_timeout 10;
        proxy_read_timeout 10;
        set $tracker app_server;
        proxy_pass http://$tracker;
    }

    location /health {
        auth_basic "off";

        proxy_pass_header Server;
        proxy_set_header Host $my_host;
        proxy_redirect off;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        proxy_connect_timeout 10;
        proxy_read_timeout 10;
        set $tracker app_server;
        proxy_pass http://$tracker;
    }


    # what to serve if upstream is not available or crashes
    error_page 500 502 503 504 /media/50x.html;
}
